// schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql" // use "mysql" or "mongodb" if preferred
  url      = env("DATABASE_URL")
}

model User {
  id               String         @id @default(uuid())
  fullName         String
  email            String         @unique
  supabaseId       String         @unique // maps to Supabase's user ID
  
  // Optional profile fields - required for lot applications
  marriageStatus   MarriageStatus?
  occupation       String?
  placeOfBirth     String?
  dateOfBirth      DateTime?
  cellPhone        String?
  copyOfIdUrl      String?        // Stored as file/image URL
  curp             String?        // Mexican CURP (optional)
  proofOfResidencyUrl String?     // Stored as file/image URL
  role             UserRole       @default(BUYER)
  
  // Relations
  lots             Lot[]          // One user can own multiple lots
  lotRequests      LotRequest[]   // Requests made by this user

  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
}

model Lot {
  id                String       @id @default(cuid())
  status            LotStatus
  price             Float
  amenities         String[]     // Store as array of strings (Postgres)
  width             Float
  length            Float
  height            Float
  ownerId           String?
  owner             User?        @relation(fields: [ownerId], references: [id])
  lotRequests       LotRequest[] // Requests for this lot

  createdAt         DateTime     @default(now())
  updatedAt         DateTime     @updatedAt

  @@index([status])
  @@index([price])
}

model LotRequest {
  id                String        @id @default(cuid())
  lotId             String
  lot               Lot           @relation(fields: [lotId], references: [id])
  userId            String
  user              User          @relation(fields: [userId], references: [id])
  status            RequestStatus @default(PENDING)
  adminNotes        String?       // Notes from admin about the request
  adminContacted    Boolean       @default(false) // Whether admin has contacted the buyer
  contactDate       DateTime?     // When admin contacted the buyer
  approvedAt        DateTime?     // When the request was approved
  approvedBy        String?       // Admin who approved the request

  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt

  @@index([status])
  @@index([lotId])
  @@index([userId])
}

// Enums

enum MarriageStatus {
  SINGLE
  MARRIED
  DIVORCED
  WIDOWED
}


enum LotStatus {
  AVAILABLE
  RESERVED
  SOLD
  PENDING_APPROVAL
}

enum Amenities {
  GYM
  POOL
  PLAYGROUND
  PET_PARK
  YOGA
  BBQ_AREA
  GREAT_VIEW
  CLOSE_TO_AMMENITIES
  CORNER
}

enum UserRole {
  ADMIN
  BUYER
}

enum RequestStatus {
  PENDING
  CONTACTED
  APPROVED
  REJECTED
}
